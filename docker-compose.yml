version: '3'

services:
  gunicorn:
    image: etl-engine
    build: .
    depends_on:
      - redis
      - nginx-proxy
    stop_signal:
      SIGTERM
    environment:
      ETL_ENVIREMENT: "${ETL_ENVIREMENT:-docker_dev}"
      VIRTUAL_HOST: "${VIRTUAL_HOST:-localhost}"
      REDSHIFT_URL: "${REDSHIFT_URL}"
      SQLALCHEMY_DATABASE_URI: "${SQLALCHEMY_DATABASE_URI}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
      CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND}"
      AIRFLOW_DB_URL: "${AIRFLOW_DB_URL}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
    restart: always
  celery:
    image: etl-engine
    environment:
      ETL_ENVIREMENT: "${ETL_ENVIREMENT:-docker_dev}"
      REDSHIFT_URL: "${REDSHIFT_URL}"
      SQLALCHEMY_DATABASE_URI: "${SQLALCHEMY_DATABASE_URI}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
      CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND}"
      AIRFLOW_DB_URL: "${AIRFLOW_DB_URL}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
    command: celery -A manage.celery worker -l info -Q etl,rollback,ext_history
    depends_on:
      - redis
      - rabbitmq
    stop_signal:
      SIGTERM
    restart: always
  celery-inventory:
    image: etl-engine
    environment:
      ETL_ENVIREMENT: "${ETL_ENVIREMENT:-docker_dev}"
      REDSHIFT_URL: "${REDSHIFT_URL}"
      SQLALCHEMY_DATABASE_URI: "${SQLALCHEMY_DATABASE_URI}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
      CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND}"
      AIRFLOW_DB_URL: "${AIRFLOW_DB_URL}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
    command: celery -A manage.celery worker -l info -Q inventory
    depends_on:
    - redis
    - rabbitmq
    stop_signal:
      SIGTERM
    restart: always
  redis:
    image: redis:4
    restart: always
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "${PORT:-5000}:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    restart: always
